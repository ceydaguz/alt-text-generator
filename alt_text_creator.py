# -*- coding: utf-8 -*-
"""alt-text-creator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BJtpD3_vLS1sgpU1tFy_1GK7bnY1A86z
"""

# Install necessary libraries
!pip install pandas requests pillow transformers

from google.colab import drive
from google.colab import files

import pandas as pd
import requests
from PIL import Image
from io import BytesIO
from transformers import BlipProcessor, BlipForConditionalGeneration

# Mount Google Drive
drive.mount('/content/drive')

input_file_path = '/content/drive/MyDrive/images_missing_alt_text-1.xlsx'  # Verify the file name and path
output_file_path = '/content/drive/MyDrive/your_output_file.xlsx'

# BLIP model and processor
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

def generate_alt_text(image_url):
    try:
        response = requests.get(image_url)
        response.raise_for_status()  # Check for HTTP errors
        img = Image.open(BytesIO(response.content)).convert("RGB")

        # Process the image and generate a description from the model
        inputs = processor(img, return_tensors="pt")
        out = model.generate(**inputs)
        description = processor.decode(out[0], skip_special_tokens=True)

        # Add "-" between each word
        words = description.split()
        hyphenated_description = "-".join(words)

        return hyphenated_description
    except requests.exceptions.RequestException as e:
        return f"Error fetching image: {str(e)}"
    except Exception as e:
        return f"Error processing image: {str(e)}"

# Read the Excel file
df = pd.read_excel(input_file_path)

# Check and adjust the column names
print(df.columns)  # Print column names to verify

# Check the first few URLs in the URL column
print(df['image_url'].head())

# Generate alt text and add it to the dataframe
df['alt_text'] = df['image_url'].apply(generate_alt_text)

# Debug: Print the first few rows
print(df.head())

# Write the results to an Excel file on Google Drive
df.to_excel(output_file_path, index=False)
print(f"Alt text descriptions have been saved to {output_file_path}")